% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jsonStrings.R
\name{jsonString}
\alias{jsonString}
\title{R6 class representing a JSON string}
\description{
R6 class representing a JSON string.
}
\note{
The reference JSON string must represent an object.
}
\examples{

## ------------------------------------------------
## Method `jsonString$new`
## ------------------------------------------------

jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
jstring$prettyPrint
jstring
jstring$prettyPrint <- FALSE
jstring
jstring <- "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
jsonString$new(jstring)

## ------------------------------------------------
## Method `jsonString$print`
## ------------------------------------------------

jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
jstring
jstring$prettyPrint <- FALSE
jstring

## ------------------------------------------------
## Method `jsonString$asString`
## ------------------------------------------------

jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
cat(jstring$asString())
cat(jstring$asString(pretty = TRUE))

## ------------------------------------------------
## Method `jsonString$at`
## ------------------------------------------------

jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
jstring$at(1)
jstring$at(2, "x")

## ------------------------------------------------
## Method `jsonString$hasKey`
## ------------------------------------------------

jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
jstring$hasKey("x")
jstring <- jsonString$new(
  "{\"x\": [2,3,4], \"y\": 42}"
)
jstring$hasKey("x")

## ------------------------------------------------
## Method `jsonString$addProperty`
## ------------------------------------------------

jstring <- jsonString$new("{\"a\":[1,2,3],\"b\":\"hello\"}")
ppty <- jsonString$new("[9, 99]")
jstring$addProperty("c", ppty)
jstring

## ------------------------------------------------
## Method `jsonString$erase`
## ------------------------------------------------

jstring <- jsonString$new("{\"a\":[1,2,3],\"b\":\"hello\"}")
jstring$erase("b")
jstring
jstring <- jsonString$new("[1, 2, 3, 4, 5]")
jstring$erase(2)
jstring
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{prettyPrint}}{get or set the value of \code{prettyPrint}}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{jsonString$new()}}
\item \href{#method-print}{\code{jsonString$print()}}
\item \href{#method-asString}{\code{jsonString$asString()}}
\item \href{#method-at}{\code{jsonString$at()}}
\item \href{#method-hasKey}{\code{jsonString$hasKey()}}
\item \href{#method-addProperty}{\code{jsonString$addProperty()}}
\item \href{#method-erase}{\code{jsonString$erase()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a new \code{jsonString} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{jsonString$new(string)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{string}}{a string representing a JSON object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{jsonString} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
jstring$prettyPrint
jstring
jstring$prettyPrint <- FALSE
jstring
}
\if{html}{\out{</div>}}

\if{html}{\out{<div class="r example copy">}}
\preformatted{jstring <- "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
jsonString$new(jstring)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print a \code{jsonString} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{jsonString$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
jstring
jstring$prettyPrint <- FALSE
jstring
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-asString"></a>}}
\if{latex}{\out{\hypertarget{method-asString}{}}}
\subsection{Method \code{asString()}}{
Converts a \code{jsonString} to a character string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{jsonString$asString(pretty = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pretty}}{Boolean, whether to get a pretty string}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
cat(jstring$asString())
cat(jstring$asString(pretty = TRUE))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-at"></a>}}
\if{latex}{\out{\hypertarget{method-at}{}}}
\subsection{Method \code{at()}}{
Extract an element in a JSON string by giving a path of 
  keys or indices.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{jsonString$at(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{the elements forming the path, integers or strings}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{jsonString} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
jstring$at(1)
jstring$at(2, "x")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-hasKey"></a>}}
\if{latex}{\out{\hypertarget{method-hasKey}{}}}
\subsection{Method \code{hasKey()}}{
Checks whether a key exists in a JSON string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{jsonString$hasKey(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a string}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A Boolean value.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{jstring <- jsonString$new(
  "[1, [\"a\", 99], {\"x\": [2,3,4], \"y\": 42}]"
)
jstring$hasKey("x")
jstring <- jsonString$new(
  "{\"x\": [2,3,4], \"y\": 42}"
)
jstring$hasKey("x")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addProperty"></a>}}
\if{latex}{\out{\hypertarget{method-addProperty}{}}}
\subsection{Method \code{addProperty()}}{
Add a new property to the reference JSON string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{jsonString$addProperty(key, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a character string, the key of the new property}

\item{\code{value}}{a JSON string, the value of the new property}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, this updates the reference JSON string.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{jstring <- jsonString$new("{\"a\":[1,2,3],\"b\":\"hello\"}")
ppty <- jsonString$new("[9, 99]")
jstring$addProperty("c", ppty)
jstring
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-erase"></a>}}
\if{latex}{\out{\hypertarget{method-erase}{}}}
\subsection{Method \code{erase()}}{
Erase an object property or an array element from a JSON string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{jsonString$erase(at)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{at}}{either a character string, the key of the property to be erased, 
or an integer, the index of the array element to be erased}

\item{\code{jsonstring}}{a JSON string representing an object or an array}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, this updates the reference JSON string.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{jstring <- jsonString$new("{\"a\":[1,2,3],\"b\":\"hello\"}")
jstring$erase("b")
jstring
jstring <- jsonString$new("[1, 2, 3, 4, 5]")
jstring$erase(2)
jstring
}
\if{html}{\out{</div>}}

}

}
}
